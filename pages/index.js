import Head from 'next/head';
import Message from '../components/message';
import { useEffect, useState, useRef } from "react";
import { auth, db } from "../utils/firebase";
import { collection, doc, addDoc, updateDoc, serverTimestamp, query, onSnapshot, orderBy } from "firebase/firestore";
import { toast } from "react-toastify";
import Link from 'next/link';
import { useAuthState } from "react-firebase-hooks/auth";
import { useRouter } from "next/router";

const formatTime = (seconds) => {
  const minutes = Math.floor(seconds / 60);
  const secondsLeft = Math.floor(seconds % 60);
  return `${minutes}:${secondsLeft < 10 ? '0' : ''}${secondsLeft}`;
};

const colorFeedback = (feedback) => {
  if (feedback == "idea") return 'bg-yellow-600 text-white';
  if (feedback == "question") return 'bg-blue-600 text-white';
  if (feedback == "glow") return 'bg-green-600 text-white';
  if (feedback == "grow") return 'bg-red-600 text-white';
  return 'bg-white';
}

export default function Home() {

  const [post, setPost] = useState({feedback : "", time: 0, description : ""});
  const [timer, setTimer] = useState(0);
  const vid = useRef();
  const [ allPosts, setAllPosts ] = useState([]);
  const [user, loading] = useAuthState(auth);
  const route = useRouter();
  const routeData = route.query;

  const submitPost = async (e) => {
    e.preventDefault();

    //Run checks for description
    if (!post.description) {
        toast.error('Description field empty :(', {
            position: toast.POSITION.TOP_CENTER,
            autoClose: 1500,
        });
        return;
    }
    if (!post.feedback) {
        toast.error('Feedback field empty :(', {
            position: toast.POSITION.TOP_CENTER,
            autoClose: 1500,
        });
        return;
    }


    if (post?.hasOwnProperty("id")) {
        const docRef = doc(db, 'posts', post.id);
        const updatedPost = {...post, timestamp: serverTimestamp()};
        await updateDoc(docRef, updatedPost);
        return route.push("/");
    } else {
        //Make a new post
        const collectionRef = collection(db, 'posts');
        await addDoc(collectionRef, {
            ...post, 
            timestamp: serverTimestamp(),
            user: user.uid,
            avatar: user.photoURL,
            username: user.displayName
        });
        setPost({feedback : "", time: 0, description : ""});
        toast.success('Post has been made üöÄ', {position: toast.POSITION.TOP_CENTER, autoClose: 1500});
        return route.push("/");
    }

  };

  const handleTimeUpdate = () => {
    setTimer(vid.current.currentTime);
  };

  const getPosts = async () => {
    const collectionRef = collection(db, 'posts');
    const q = query(collectionRef, orderBy('timestamp', 'desc'));

    const unsubscribe = onSnapshot(q, (snapshot) => {
      setAllPosts(snapshot.docs.map((doc) => ({...doc.data(), id:doc.id})));
    });
    return unsubscribe;
  };

  useEffect(() => {
    vid.current.addEventListener('timeupdate', () => {handleTimeUpdate()});
    getPosts();
  }, []);

  useEffect(() => {
    setPost({...post, time: timer});
  }, [timer]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='flex justify-between mb-8'>

        <div className='w-1/2 mx-8'>
          <h1 className="text-4xl font-bold p-4">The Film Experience Lecture 1</h1>
          <video ref={vid} id="video1" controls className='w-full'>
            <source src="/video/MIT21L_011F13_L13_300k.mp4" type='video/mp4'/>
          </video>

          <form 
            onSubmit={submitPost}
            className='mt-2'
          >
            <div className={`transition-colors duration-500 rounded-lg w-full h-fit flex items-center justify-between ${colorFeedback(post.feedback)}`}>

              <select 
                onChange={(e) => setPost({...post, feedback: e.target.value})}
                className='p-2 bg-transparent cursor-pointer focus:outline-none'
              >
                <option className='text-black'>Select Feedback</option>
                <option className='text-black' value="idea">üí° Idea</option>
                <option className='text-black' value="question">‚ùì Question</option>
                <option className='text-black' value="glow">üåü Glow</option>
                <option className='text-black' value="grow">üå± Grow</option>
              </select>

              <div 
                className='p-5'
              >
                {formatTime(post.time)}
              </div>

            </div>
            <div className="mt-2">
                <textarea 
                  value={post.description} 
                  onChange={(e) => setPost({...post, description : e.target.value})}
                  className="h-48 border-2 w-full resize-none rounded-lg p-2 text-sm"></textarea>
            </div>
            <button 
            type="submit"
            className="w-full text-black border-2 font-medium shadow-2xl p-4 rounded-lg text-sm"
            >
                Submit
            </button>
          </form>
        </div>

        <div className='my-12 text-lg font-medium w-1/2 overflow-y-scroll'>
          <h2>Comments</h2>
          {allPosts.map((mPost) => (
            <Message 
              className={`transition-colors duration-500 ${(vid.current.currentTime - 1 < mPost.time && mPost.time < vid.current.currentTime + 1) ? colorFeedback(mPost.feedback) : 'bg-white'}`}
              onClick={(e) => {vid.current.currentTime = mPost.time}} 
              key={mPost.id} 
              {...mPost}
            >
              <Link href={{pathname: `/${mPost.id}`, query: {...mPost}}}>
                <button>{mPost.comments?.length ? mPost.comments?.length : 0} comments</button>
              </Link>
            </Message>
          ))}
        </div>

      </div>
    </div>
  )
}
